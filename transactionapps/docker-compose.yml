version: '3.7'

services:

  # Public HTTP API for transactions. This would be exposed to the outside world, while the rest of our services are private
  transactionapi:
    image: ${DOCKER_REGISTRY-}demotransactionapi
    hostname: transactionapi
    container_name: transactionapi
    build:
      context: .
      dockerfile: src/JP.Demo.Chassis.TransactionApi/Dockerfile
    networks:
      - chassis
    dns: 172.30.30.30    # Needed for now so we can find Consul services. Only for demo, not for real-world
    environment:
      GLOBAL_NAME: transactionapi   # This is important as it is used in (for example) tracing. Our global name should be unique.

      # These options are for our specific api. Note that these will always be the same in all environments!
      KafkaConfig__BootstrapServerUri: cp-server.service.consul:29092
      KafkaConfig__SchemaRegistryUri: http://cp-schema-registry.service.consul:8081

      # These are invironmental options that can be generated
      JAEGER_AGENT_HOST: jaeger-agent-6831.service.consul     # Our tracing host.

      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
    labels:
      GLOBAL_NAME: transactionapi     # Same as the env var. In this demo, for example used by Traefik to construct a subdomain name.
      SERVICE_80_TAGS: webapi         # These are the tags provided to Consul.
      traefik.enable: true            # Explicitly enable it edge routing
      traefik.http.routers.transactionapi.entrypoints: http       # Only listen on the 'http' endpoint. Normally this label would be auto-created but in this demo we do not have a mechanism for that

  # Transaction Service consumes incoming transaction requests, processes them and emits an event
  transactionservice:
    image: ${DOCKER_REGISTRY-}demotransactionservice
    hostname: transactionservice
    container_name: transactionservice
    build:
      context: .
      dockerfile: src/JP.Demo.Chassis.TransactionService/Dockerfile
    networks:
      - chassis
    dns: 172.30.30.30    # Needed for now so we can find Consul services. Only for demo, not for real-world
    environment:
      GLOBAL_NAME: transactionservice

      KafkaConfig__BootstrapServerUri: cp-server.service.consul:29092
      KafkaConfig__SchemaRegistryUri: http://cp-schema-registry.service.consul:8081

  
  
  ## Produces transactions directly to the bus. Simulates a separate (non-HTTP) ingress point
  #jp.demo.chassis.transactionproducerdirect:
  #  image: ${DOCKER_REGISTRY-}jpdemochassistransactionproducerdirect
  #  hostname: transactionproducerdirect
  #  container_name: transactionproducerdirect
  #  build:
  #    context: .
  #    dockerfile: src/JP.Demo.Chassis.TransactionProducerDirect/Dockerfile
  #  networks:
  #    - chassis



networks:
  chassis:
    external: true
